{
    "collab_server" : "",
    "contents" : "# The dataset credit contains information about the bank customers.\n# It is used to identify whether a customer who applied for the\n# loan will default or not.\n\n## libraries that may be needed\nlibrary(e1071)\nlibrary(caret)\nlibrary(caTools)\nlibrary(ROCR)\nlibrary(klaR)\n\n#1. Load credit data into R. Make sure the categorical\n# variables are factored. Create testing and training \n# datasets, so that 80% of data goes to train and the rest\n# goes to test. Make sure the proportions of the dependent \n# variable are fixed. Set the seed to 2016. (7)\n\ncredit <- read.csv(\"Credit.csv\")\ncredit$ed <- as.factor(credit$ed)\ncredit$default <- as.factor(credit$default)\ncredit$default <- factor(credit$default, \n                         levels = c(0,1),labels = c(\"Not Defaulted\",\"Defaulted\"))\n\nset.seed(2016)\nindex <- createDataPartition(credit$default, p = .8, list = FALSE)                \nTrain <- credit[index,]\nTest <- credit[-index,]\n\n\n#2. Create a naive bayes model on the dataset. Set \n# Laplace equal to 1. What is the accuracy of the model? (7)\n\nnb_model <- naiveBayes(default~., data = Train, laplace = 1)\n\npred_test <- predict(nb_model, newdata = Test)\n\npred_test_prob <- predict(nb_model, newdata = Test, type = \"raw\")\n\npredictions <- prediction(pred_test_prob[, 1], Test$default, label.ordering = c(\"Defaulted\", \"Not Defaulted\"))\n\nconfusionMatrix(pred_test, Test$default, positive = \"Defaulted\") # cnofusion matrix\n## Accuracy : 0.741\n## Sensitivity : 0.27778\n## Specificity : 0.90291\n\n#3. Plot the ROC curve, make sure you have the colors of the\n# thresholds on the curve. Give explanation to the coloring of\n# the curve: what does it show?? What is the AUC? (7)\n\nperf <- performance(predictions, \"tpr\", \"fpr\")\nplot(perf, colorize = TRUE)\nperformance(predictions, \"auc\")@y.values\n\n## The area under the curve is 0.7208738\n\n#4. Given that someone defaulted, what is the probability that\n# he/she has postgarduate degree? (7)\n\nnb_model$tables # conditional probabilities tables\n\n## Given that someone defaulted,\n## the probability of having post_graduate degree is 0.01315789\n## Note: this is for Train dataset, not for the whole credit data\n\n#5.Take any of the classification methods that we studied so\n# far and build a model using it. Compare that model with the\n# Naive Bayes model. Which one does better? Comment. (7)\n\n## LDA model\nLDA_model <- lda(default~., data = Train)\nLDA_pred <- predict(LDA_model, newdata = Test)\n\nconfusionMatrix(LDA_pred$class, Test$default, positive = \"Defaulted\")\n\n## LDA model did a bit better job with the following results\n## Accuracy = 0.777\n## Sensitivity : 0.27778\n## Specificity : 0.90291  \n\n## Accuracy is better 0.777 > 0.741\n\n## GLM model\nGLM_model <- glm(default~ ., data = Train, family = \"binomial\")\nGLM_pred <- predict(GLM_model, newdata = Test, type = \"response\")\n\nlabels <- ifelse(GLM_pred > 0.5, \"Defaulted\", \"Not Defaulted\")\nconfusionMatrix(labels, Test$default, positive = \"Defaulted\")\n\n## GLM model has even better results\n## Accuracy : 0.7986 > 0.741\n## Sensitivity : 0.5556 > 0.27778\n## Specificity : 0.8835 < 0.90291 (except this one)\n\n#6. Load the scoring datset into R. Our goal will be to give\n# credit scores (defualting probabilities) to the potential\n# customers. Predict the scores with the Naive Bayes model. (8)\n\nscoring <- read.csv(\"Scoring.csv\")\nscoring_predict <- predict(nb_model, newdata = scoring, type = \"raw\")\nscoring$default <- scoring_predict[, 2]\n\n#7. Identify the top 25% of customers that are least risky.\n# Describe them with the variables you have in the scoring dataset.(7) \n\nleastRisky_25 <- head(scoring[order(scoring$default, decreasing= FALSE),], n = nrow(scoring)/4)\n\nprint(average_age_top <- mean(leastRisky_25$age))\nprint(average_income_top <- mean(leastRisky_25$income))\nprint(average_debt_card_top <- mean(leastRisky_25$creddebt))\nprint(debt_income__average_top <- mean(leastRisky_25$debtinc))\n\ntable(leastRisky_25$ed)\n\n## Aveerage age = 40.64865~41\n## Average income = 54.40541\n## Average credit card debt ~ 1097\n## Average ratio of debt to income = 7.727027\n\n## data from education degree table\n## 1 has high school degree\n## 36 people do not have even high school degree\n\n# Bonus point\n#8. Compare top 25% of risky customers (Quartile 4) with bottom 25% of risky customers (Quartile 1). \n# What are the main differences you see? Generate 1-2 tables and graphs for the analysis. (10 points)\n\nbottomRisky_25 <- tail(scoring[order(scoring$default, decreasing = FALSE),], n = nrow(scoring)/4)\nprint(averageAge_bottom <- mean(bottomRisky_25$age))\n# Average age for bottom 25% = 35.84211 ~ 36 years\nprint(averageIncome_bottom <- mean(bottomRisky_25$income))\n# Average income for bottom 25% ~ 79473\nprint(average_debt_card_bottom <- mean(bottomRisky_25$creddebt))\n# Average credit card debt ~ 3472\nprint(debt_income__average_bottom <- mean(bottomRisky_25$debtinc))\n# Average ratio of debt to income = 12.96316\n\ntable(bottomRisky_25$ed)\nhist(bottomRisky_25$ed) # education level histogram\n## Amazingly high number of people with college degree compared to other education levels\n## 2nd most are post-graduate degree people\n\ncor(bottomRisky_25$income, bottomRisky_25$ed)\npairs(bottomRisky_25) # some correlations of variables\n\n## Average age comparison : 36 < 41\n## Average incomecomparison : 79473 > 54405\n## Average credit card debt comparison : 3472 > 1097\n## Average ratio of debt to income comparison : 12.96316 > 7.727027\n\n## here the level of education is much higher in average than in top 25%",
    "created" : 1479056558645.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "923143836",
    "id" : "B0406C2C",
    "lastKnownWriteTime" : 1479058101,
    "last_content_update" : 1479058101670,
    "path" : "D:/Programming/R/Homework 7/Mark_Hovsepyan_HW7.R",
    "project_path" : "Mark_Hovsepyan_HW7.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}