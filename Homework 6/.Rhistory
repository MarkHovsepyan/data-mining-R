Train <- load("voting_train.rda")
load("voting_train.rda")
load("voting_test.rda")
View(v_train)
library(rpart)
library(caret)
library(caTools)
library(rpart)
library(rpart.plot)
library(rattle)
library(caret)
library(ROCR)
library(caTools)
?make.names
View(v_test)
make.names(v_train, unique = FLASE, allow_ = TRUE)
make.names(v_train, unique = FALSE, allow_ = TRUE)
fit<-rpart(Class~., data = v_train, method = "class")
prp(fit,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
prp(fit,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
library(rattle)
install.packages("rattle")
library(rattle)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(caret)
library(ROCR)
library(caTools)
library(rpart)
library(rpart.plot)
library(rattle)
library(caret)
library(ROCR)
library(caTools)
fit <- rpart(Class~., data = v_train, method = "class")
prp(fit,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
fancyRpartPlot(fit)
pred_class<-predict(fit, v_test, type="class")
table(Actual = v_test$Class, Predicted = pred_class)
confusionMatrix(pred_class, v_test$Class, positive = "democrat")
make.names(names(v_train), unique = FALSE, allow_ = TRUE)
names(v_train) <- make.names(names(v_train), unique = FALSE, allow_ = TRUE)
names(v_test) <- make.names(names(v_test), unique = FALSE, allow_ = TRUE)
load("voting_train.rda")
load("voting_test.rda")
names(v_train) <- make.names(names(v_train), unique = FALSE, allow_ = TRUE)
names(v_test) <- make.names(names(v_test), unique = FALSE, allow_ = TRUE)
fit <- rpart(Class~., data = v_train, method = "class")
prp(fit,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
fancyRpartPlot(fit)
pred_class<-predict(fit, v_test, type="class")
table(Actual = v_test$Class, Predicted = pred_class)
confusionMatrix(pred_class, v_test$Class, positive = "democrat")
pred_class<-predict(fit, v_test, type="class")
table(Actual = v_test$Class, Predicted = pred_class)
confusionMatrix(pred_class, v_test$Class, positive = "republican")
fit_new <- rpart(Class~cp+minbucket+minsplit, data = v_train, method = "class")
fit_new <- rpart(Class~education.spending, data = v_train, method = "class")
prp(fit,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(fit_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
summary(fit)
load("voting_train.rda")
load("voting_test.rda")
colnames(v_train) <- make.names(colnames(v_train), unique = FALSE, allow_ = TRUE)
colnames(v_test) <- make.names(colnames(v_test), unique = FALSE, allow_ = TRUE)
dtree <- rpart(Class~., data = v_train, method = "class")
prp(fit,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
dtree <- rpart(Class~., data = v_train, method = "class")
prp(dtree,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
fancyRpartPlot(dtree)
pred_class <- predict(dtree, v_test, type = "class")
table(Actual = v_test$Class, Predicted = pred_class)
confusionMatrix(pred_class, v_test$Class, positive = "republican")
dtree_new <- rpart(Class~., data = v_train, method = "class",
minsplit = 25,
minbucket = 10,
cp = 0.1)
prp(dtree_new,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(dtree_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
dtree_new <- rpart(Class~., data = v_train, method = "class",
minsplit = 25,
minbucket = 15,
cp = 0.05)
prp(dtree_new,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(dtree_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
dtree_new <- rpart(Class~., data = v_train, method = "class",
minsplit = 35,
minbucket = 15,
cp = 0.05)
prp(dtree_new,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(dtree_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
dtree_new <- rpart(Class~., data = v_train, method = "class",
minsplit = 15,
minbucket = 15,
cp = 0.05)
prp(dtree_new,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(dtree_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
dtree_new <- rpart(Class~., data = v_train, method = "class",
minsplit = 20,
minbucket = 15,
cp = 0.05)
prp(dtree_new,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(dtree_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
dtree_new <- rpart(Class~., data = v_train, method = "class",
minsplit = 20,
minbucket = 20,
cp = 0.05)
prp(dtree_new,
type = 1, #type of the plot
extra = 4, #display extra information
faclen = 5,# length of the factor variable to be shown
main = "Decision tree for voting data")
pred_class_new <- predict(dtree_new, v_test, type = "class")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
confusionMatrix(pred_class, v_test$Class, positive = "republican")
confusionMatrix(pred_class_new, v_test$Class, positive = "republican")
asRules(dtree_new)
pred_vote <- predict(dtree_new, v_test, type = "prob")
View(pred_vote)
prediction_vote <- prediction(pred_prop[, 2], v_test$Class)
prediction_vote <- prediction(pred_vote[, 2], v_test$Class)
perf <- performance(pred,"tpr","fpr")
performance(pred, "auc")@y.values
perf <- performance(pred,"tpr","fpr")
perf <- performance(prediction,"tpr","fpr")
perf <- performance(prediction_vote, "tpr", "fpr")
performance(pred, "auc")@y.values
performance(prediction_vote, "auc")@y.values
plot(perf)
performance(prediction_vote, "auc")@y.values #AUC = 0.8160173
plot(perf)
names(getModelInfo())
ctrl_1 <- trainControl(method="repeatedcv", number = 15, repeats = 5,
classProbs =T,summaryFunction = twoClassSummary )
ctrl_1 <- trainControl(method="repeatedcv", number = 15, repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(2016)
ctrl_1 <- trainControl(method="repeatedcv", number = 15, repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(2016)
fit_vote <- train(Class~., data = v_train, method = "rpart",
preProcess=c("center", "scale"),
trControl = ctrl_1,
tuneGrid = expand.grid(k = 1:60))
fit_vote <- train(Class~., data = v_train, method = "rpart",
preProcess = c("center", "scale"),
trControl = ctrl_1,
tuneGrid = expand.grid(k = 1:30))
fit_vote <- train(Class~., data = v_train, method = "rpart",
preProcess = c("center", "scale"),
trControl = ctrl_1,
tuneLength = 60)
set.seed(2016)
ctrl_1 <- trainControl(method="repeatedcv", number = 15, repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
library(rpart)
library(rpart.plot)
library(rattle)
library(caret)
library(ROCR)
library(caTools)
set.seed(2016)
ctrl_1 <- trainControl(method="repeatedcv", number = 15, repeats = 5,
classProbs = TRUE,
summaryFunction = twoClassSummary)
set.seed(2016)
fit_vote <- train(Class~., data = v_train, method = "rpart",
preProcess = c("center", "scale"),
trControl = ctrl_1,
tuneLength = 60)
set.seed(2016)
fit_vote <- train(Class~., data = v_train, method = "rpart",
preProcess = c("center", "scale"),
trControl = ctrl_1,
tuneLength = 30)
set.seed(2016)
fit_vote <- train(Class~., data = v_train, method = "rpart",
preProcess = c("center", "scale"),
trControl = ctrl_1,
tuneLength=50)
fit_vote$results
fit_vote$bestTune
plot(fit_vote)
