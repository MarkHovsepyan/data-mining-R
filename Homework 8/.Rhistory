library(e1071)
library(caret)
library(caTools)
library(ROCR)
library(klaR)
library(ggplot2)
library(class)
library(MASS)
voice <- read.csv("voice.csv")
View(voice)
index <- createDataPartition(voice_data$label, p = 0.8, list = FALSE)
set.seed(2016)
index <- createDataPartition(voice_data$label, p = 0.8, list = FALSE)
library(caret)
set.seed(2016)
index <- createDataPartition(voice_data$label, p = 0.8, list = FALSE)
train_voice <- voice[index,]
test_voice <- voice[-index,]
set.seed(2016)
index <- createDataPartition(voice_data$label, p = 0.8, list = FALSE)
set.seed(2016)
index <- createDataPartition(voice$label, p = 0.8, list = FALSE)
train_voice <- voice[index,]
test_voice <- voice[-index,]
set.seed(2016)
model_linear <- svm(label ~ ., data = voice_training, kernel = "linear", probability = TRUE)
set.seed(2016)
model_linear <- svm(label ~ ., data = train_voice, kernel = "linear", probability = TRUE)
svm_linear_predict <- predict(model_linear, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_linear, test_voice$label)
set.seed(2016)
model_linear <- svm(label ~ ., data = train_voice, kernel = "linear", probability = TRUE)
pred_liear <- predict(model_linear, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_linear, test_voice$label)
set.seed(2016)
model_linear <- svm(label ~ ., data = train_voice, kernel = "linear", probability = TRUE)
pred_linear <- predict(model_linear, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_linear, test_voice$label)
library(e1071)
library(caret)
library(caTools)
library(ROCR)
library(klaR)
library(ggplot2)
library(class)
library(MASS)
voice <- read.csv("voice.csv")
set.seed(2016)
index <- createDataPartition(voice$label, p = 0.8, list = FALSE)
train_voice <- voice[index,]
test_voice <- voice[-index,]
set.seed(2016)
model_linear <- svm(label ~ ., data = train_voice, kernel = "linear", probability = TRUE)
pred_linear <- predict(model_linear, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_linear, test_voice$label)
set.seed(2016)
model_polynomial <- svm(label ~ ., data = train_voice, kernel = "polynomial", probability = TRUE)
pred_polinomial <- predict(model_polynomial, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_polinomial, test_voice$label)
set.seed(2016)
model_radial <- svm(label ~ ., data = train_voice, kernel = "radial", probability = TRUE)
pred_radial <- predict(model_radial, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_radial, test_voice$label)
set.seed(2016)
model_sigmoid <- svm(label ~ ., data = train_voice, kernel = "sigmoid", probability = TRUE)
pred_sigmoid <- predict(model_sigmoid, newdata = test_voice, probability = TRUE)
confusionMatrix(pred_sigmoid, test_voice$label)
radial_predict <- predict(model_radial, newdata = test_voice,
probability = TRUE, type = "raw")
radial_predict <- attr(radial_predict, "probabilities")
p_test_radial_f <- prediction(radial_predict[,2], test_voice$label, label.ordering = c("male", "female"))
perf_radial_f <- performance(p_test_radial_f, 'tpr', 'fpr')
plot(perf_radial_f)
set.seed(2016)
ctrl <- trainControl(method = "repeatedcv", number = 12, repeats = 4)
set.seed(2016)
ctrl <- trainControl(method = "repeatedcv", number = 12, repeats = 4)
set.seed(2016)
fit_svm <- train(label ~ ., data = train_voice, trControl = ctrl, method = "svmRadialCost")
fit_svm$results
fit_svm$bestTune
set.seed(2016)
fit_svm <- train(label ~ ., data = train_voice, trControl = ctrl, method = "svmRadial")
fit_svm$results
fit_svm$bestTune
set.seed(2016)
fit_svm <- train(label ~ ., data = train_voice, trControl = ctrl, method = "svmRadialCost")
fit_svm$results
fit_svm$bestTune
set.seed(2016)
fit_svm <- train(label ~ ., data = train_voice, trControl = ctrl,
method = "svmRadialCost", tuneLength = 10)
fit_svm$results
fit_svm$bestTune
set.seed(2016)
ctrl <- trainControl(method = "repeatedcv", number = 12, repeats = 4)
set.seed(2016)
fit_svm <- train(label ~ ., data = train_voice, trControl = ctrl,
method = "svmRadialCost")
fit_svm$results
set.seed(2016)
ctrl <- trainControl(method = "repeatedcv", number = 12, repeats = 4)
set.seed(2016)
fit_svm <- train(label ~ ., data = train_voice, trControl = ctrl,
method = "svmRadialCost", tuneLength = 10)
fit_svm$results
fit_svm$bestTune
LDA_model <- lda(label ~ ., data = train_voice)
LDA_pred <- predict(LDA_model, newdata = test_voice)
confusionMatrix(LDA_pred$class, test_voice$label, positive = "Male")
LDA_pred$class
confusionMatrix(LDA_pred$class, test_voice$label, positive = "male")
GLM_model <- glm(label ~  ., data = train_voice, family = "binomial")
GLM_pred <- predict(GLM_model, newdata = test_voice, type = "response")
LDA_model <- lda(label ~ ., data = train_voice)
LDA_pred <- predict(LDA_model, newdata = test_voice)
confusionMatrix(LDA_pred$class, test_voice$label, positive = "female")
GLM_model <- glm(label ~  ., data = train_voice, family = "binomial")
GLM_pred <- predict(GLM_model, newdata = test_voice, type = "response")
labels <- ifelse(GLM_pred > 0.5, "male", "female")
confusionMatrix(labels, test_voice$label, positive = "female")
diabetes <- read.csv("Diabetes.csv")
diabetes$Class <- as.factor(diabetes$Class)
set.seed(2016)
index <- createDataPartition(diabetes$Class, p = 0.8, list = FALSE)
train_diab <- diabetes_data[index,]
diabetes <- read.csv("Diabetes.csv")
diabetes$Class <- as.factor(diabetes$Class)
set.seed(2016)
index <- createDataPartition(diabetes$Class, p = 0.8, list = FALSE)
train_diab <- diabetes[index,]
test_diab <- diabetes[-index,]
model_lda <- lda(Class ~ . , data = train_diab)
predict_lda <- predict(model_lda, newdata = test_diab)
confusionMatrix(predict_lda$class, test_diab$Class, positive = '1')
set.seed(2016)
SVM_radial_model <- svm(Class ~ ., data = train_diab, kernel = "radial", probability = TRUE)
SVM_radial_pred <- predict(SVM_radial_model, newdata = test_diab, probability = TRUE)
confusionMatrix(pred_radial, test_diab$Class)
set.seed(2016)
SVM_radial_model <- svm(Class ~ ., data = train_diab, kernel = "radial", probability = TRUE)
SVM_radial_pred <- predict(SVM_radial_model, newdata = test_diab, probability = TRUE)
confusionMatrix(SVM_radial_pred, test_diab$Class)
diabetes <- read.csv("Diabetes.csv")
diabetes$Class<-factor(diabetes$Class, levels = c(0,1), labels = c("No", "Yes"))
diabetes$Class <- as.factor(diabetes$Class)
set.seed(2016)
index <- createDataPartition(diabetes$Class, p = 0.8, list = FALSE)
train_diab <- diabetes[index,]
test_diab <- diabetes[-index,]
model_lda <- lda(Class ~ . , data = train_diab)
predict_lda <- predict(model_lda, newdata = test_diab)
confusionMatrix(predict_lda$class, test_diab$Class, positive = '1')
diabetes <- read.csv("Diabetes.csv")
diabetes$Class <- as.factor(diabetes$Class)
set.seed(2016)
index <- createDataPartition(diabetes$Class, p = 0.8, list = FALSE)
train_diab <- diabetes[index,]
test_diab <- diabetes[-index,]
model_lda <- lda(Class ~ . , data = train_diab)
predict_lda <- predict(model_lda, newdata = test_diab)
confusionMatrix(predict_lda$class, test_diab$Class, positive = '1')
set.seed(2016)
SVM_radial_model <- svm(Class ~ ., data = train_diab, kernel = "radial", probability = TRUE)
SVM_radial_pred <- predict(SVM_radial_model, newdata = test_diab, probability = TRUE)
confusionMatrix(SVM_radial_pred, test_diab$Class)
GLM_model_diab <- glm(Class ~  ., data = train_diab, family = "binomial")
GLM_pred_diab <- predict(GLM_model_diab, newdata = test_diab, type = "response")
GLM_model_diab <- glm(Class ~  ., data = train_diab, family = "binomial")
GLM_pred_diab <- predict(GLM_model_diab, newdata = test_diab, type = "response")
labels <- ifelse(GLM_pred_diab > 0.5, "0", "1")
confusionMatrix(labels, test_diab$label, positive = "1")
labels <- ifelse(GLM_pred_diab > 0.5, "0", "1")
confusionMatrix(labels, test_diab$Class, positive = "1")
GLM_pred_diab <- predict(GLM_model_diab, newdata = test_diab, type = "response")
GLM_model_diab <- glm(Class ~  ., data = train_diab, family = "binomial")
GLM_pred_diab <- predict(GLM_model_diab, newdata = test_diab, type = "response")
labels <- ifelse(GLM_pred_diab > 0.5, "1", "0")
confusionMatrix(labels, test_diab$Class, positive = "1")
temp<-read.table("http://math.agrocampus-ouest.fr/infoglueDeliverLive/digitalAssets/92802_temperat.txt", header=T, dec=",")
str(temp)
all_months<-temp[,1:12]
h<-hclust(dist(all_months), method = "ward.D2")
plot(h, sub="", labels=rownames(all_months))
install.packages("FactoMineR")
library(FactoMineR)
m<-hclust(dist(all_months))
cl<-cutree(m,3)
rect.hclust(m,k=3) #very optimal
pca<-PCA(months,scale.unit=F, graph=T, col.w=NULL, quanti.sup = T, quali.sup = T)
pca<-PCA(months,scale.unit=F, graph=T, col.w=NULL, quanti.sup = T, quali.sup = T)
install.packages("tripack")
library(tripack)
pca<-PCA(months,scale.unit=F, graph=T, col.w=NULL, quanti.sup = T, quali.sup = T)
kmeans<-kmeans(pca$ind$coord[,1:2],3) #3 clusters
library(FactoMineR)
m<-hclust(dist(all_months))
cl<-cutree(m,3)
rect.hclust(m,k=3) #very optimal
pca<-PCA(months,scale.unit=F, graph=T, col.w=NULL, quanti.sup = T, quali.sup = T)
temp<-read.table("http://math.agrocampus-ouest.fr/infoglueDeliverLive/digitalAssets/92802_temperat.txt", header=T, dec=",")
str(temp)
all_months<-temp[,1:12]
h<-hclust(dist(all_months), method = "ward.D2")
plot(h, sub="", labels=rownames(all_months))
install.packages("FactoMineR")
install.packages("FactoMineR")
library(FactoMineR)
m<-hclust(dist(all_months))
cl<-cutree(m,3)
rect.hclust(m,k=3) #very optimal
rect.hclust(m,k=3) #very optimal
pca<-PCA(months,scale.unit=F, graph=T, col.w=NULL, quanti.sup = T, quali.sup = T)
install.packages("tripack")
library(tripack)
kmeans<-kmeans(pca$ind$coord[,1:2],3) #3 clusters
k<-kmeans(all_months, 3)
k
kmeans_membership<-k$cluster)
table(cl,  kmeans_membership)
cl
install.packages("maps")
library(maps)
map("france", regions = ".", exact = F, resolution = 0, bg="light blue")
points(temp$Long, temp$Lati, col=cl, pch=19)
library(car)
for(i in 1:3)
dataEllipse(temp$Long[cl==i], temp$Lati[cl==i], levels=.7,add=TRUE, col=i+1,fill=TRUE)
library(e1071)
library(caret)
library(ROCR)
library(klaR)
library(caTools)
library(ggplot2)
library(class)
library(MASS)
sentiment_data <- read.csv("Sentiment Analysis Dataset")
sentiment_data <- read.csv("Sentiment Analysis Dataset.csv")
View(sentiment_data)
sentiment_sample <- sentiment_full[1:3000,]
sentiment_full <- read.csv("Sentiment Analysis Dataset.csv")
install.packages("Quandl")
sentiment_sample <- sentiment_full[1:3000,]
View(sentiment_sample)
read.delim("tic-tac-toe.dat")
tictac <- read.delim("tic-tac-toe.dat")
View(tictac)
gender_data <- read.csv("gender_data.csv")
View(gender_data)
clusters <- kmeans(gender_data, 15)  # take all variables
View(gender_data)
clusters <- kmeans(gender_data, 15)  # take all variables
clusters <- kmeans(gender_data, 3)  # take all variables
clusters$size                    # 8 16 16
View(gender_data)
clusters <- kmeans(gender_data[, 2:3], 3)  # take all variables
clusters$size                    # 8 16 16
names(clusters)
View(gender_data)
set.seed(2016)
index <- createDataPartition(gender_data$Class, p = 0.8, list = FALSE)
train_gender <- gender_data[index,]
test_gender <- gender_data[-index,]
set.seed(2016)
index <- createDataPartition(gender_data$Class, p = 0.8, list = FALSE)
index <- createDataPartition(gender_data$Gender, p = 0.8, list = FALSE)
train_gender <- gender_data[index,]
test_gender <- gender_data[-index,]
lda_gender <- lda(Gender ~ . , data = train_gender)
gender_pred_lda <- predict(lda_gender, newdata = test_gender)
confusionMatrix(gender_pred_lda$class, test_gender$Gender, positive = 'Female')
set.seed(2016)
gender_svm <- svm(Gender ~ ., data = train_gender, kernel = "polynomial", probability = TRUE)
gender_pred_svm <- predict(gender_pred_svm, newdata = test_gender, probability = TRUE)
confusionMatrix(gender_pred_svm, test_gender$Gender)
set.seed(2016)
gender_svm <- svm(Gender ~ ., data = train_gender, kernel = "polynomial", probability = TRUE)
gender_pred_svm <- predict(gender_pred_svm, newdata = test_gender, probability = TRUE)
svm_gender <- svm(Gender ~ ., data = train_gender, kernel = "polynomial", probability = TRUE)
set.seed(2016)
svm_gender <- svm(Gender ~ ., data = train_gender, kernel = "polynomial", probability = TRUE)
gender_pred_svm <- predict(svm_gender, newdata = test_gender, probability = TRUE)
confusionMatrix(gender_pred_svm, test_gender$Gender)
set.seed(2016)
set.seed(2016)
svm_gender <- svm(Gender ~ ., data = train_gender, kernel = "radial", probability = TRUE)
gender_pred_svm <- predict(svm_gender, newdata = test_gender, probability = TRUE)
confusionMatrix(gender_pred_svm, test_gender$Gender)
set.seed(2016)
glm_gender <- glm(Gender ~  ., data = train_gender, family = "binomial")
gender_pred_glm <- predict(glm_gender, newdata = test_gender, type = "response")
View(gender_data)
labels <- ifelse(gender_pred_glm > 0.5, "Male", "Female")
confusionMatrix(labels, test_gender$Gender, positive = "Female")
model <- knn(train_gender[, 1:3], Test[, 1:3], train_gender$Gender, k = 3) # model for k number
model <- knn(train_gender[, 1:3], test_gender[, 1:3], train_gender$Gender, k = 3) # model for k number
model <- knn(train_gender[, 2:3], test_gender[, 2:3], train_gender$Gender, k = 3) # model for k number
model
confusionMatrix(model, test_gender$Gender, positive = "Female") # for finding accuracy
model <- knn(train_gender[, 2:3], test_gender[, 2:3], train_gender$Gender, k = 25) # model for k number
model
confusionMatrix(model, test_gender$Gender, positive = "Female") # for finding accuracy
set.seed(2016)
model <- knn(train_gender[, 2:3], test_gender[, 2:3], train_gender$Gender, k = 25) # for k = 25
model
confusionMatrix(model, test_gender$Gender, positive = "Female")
gender_knn <- knn(train_gender[, 2:3], test_gender[, 2:3], train_gender$Gender, k = 25) # for k = 25
confusionMatrix(model, test_gender$Gender, positive = "Female")
confusionMatrix(gender_pred_lda$class, model, positive = 'Female')
confusionMatrix(gender_knn, test_gender$Gender, positive = "Female")
confusionMatrix(gender_kmeans, test_gender$Gender, positive = "Female")
set.seed(2016)
gender_kmeans <- kmeans(train_gender[, 2:3], 3)  # for k = 25
confusionMatrix(gender_kmeans, test_gender$Gender, positive = "Female")
gender_kmeans
gender_kmeans$cluster
gender_kmeans <- kmeans(train_gender[, 2:3], 2)  # for k = 25
gender_kmeans$cluster
gender_kmeans
